
/*
Level-1
 #CSS-(Cascading Style Sheet)
    It is a language that is used to describe the style of a document
        
 #Basic Syntax-
   Selector-   h1{
                  color:red;
                   |      |
             (Property)  (Value)

               }

 #Including style-
  *Inline-
   <h1 style="color:red"> The Language </h1>

  *<style> tag-
    <style>
           h1{
            color:red;
           }
    </style>
  
  *External Stylesheet-
    Writing CSS in a separate document & linking it with HTML file

 #Foreground Color Property-
   Used to set the color of foreground
    color:red;
    color:pink;
    color:blue;
    color:green:
 
 #Background Color Property-
   Used to set the color of background
    background-color:red;
    background-color:pink;
    background-color:blue;
    background-color:green;

 #Color System-
  *RGB (R-Red,G-Green,B-Blue)
    color:rgb(255,0,0)
    color:rgb(0,255,0)
    color:rgb(0,0,255)
  
  *Hex (Hexadecimal)
    color:#ff0000;
    color:#00ff00;
    color:#0000ff;

 #Selectors-
   *Universal Selector
            *{}
   
   *Element Selector
            h1{}
   
   *Id Selector
            #myid{}

   *Class Selector
            .myClass{}
      
 #Practic Set-1
   Q1:Create a simple div with an id "box".
      Add some text content inside the div.
      Set its background color to blue.

   Q2:Create 3 heading with h1,h2 & h3.
      Give them all a class "heading" & set color of "heading"to red.
   
   Q3:Create a button & set its background color to:
        .green using css stylesheet
        .blue using <style>tag
        .pink using inline style


 #Text Properties-
   *text-align
     text-align:left/right/center
     
     text-align:start/end  (only for CSS3(updated version))

   *text-decoration
     text-decoration:underline/overline/line-through
     text-decoration:none;
     text-decoration:blue dotted underline;   (text-decoration-style = dotted,solid,double,wavy,dashed)
                          
   *font-weight (using for Dark/Light font)
     font-weight:normal/bold/bolder/lighter
     font-weight:100-900

   *font-family (font style)
     font-family:arial
     font-family:arial,roboto     (fall back mechanism)
     
     =Generic font families:-Generic font families are determined by font family properties such as serifs- which
                             are decorative strokes on the ends of letters-or cursive strokes.
      
        In CSS there are five generic font families:
        1.Serif: Serif fonts have a small stroke at the edges of each letter.They create a sense of formality and elegance.
                Examples: Times New,Roman,Georgia,Garamond.

        2.Sans-Serif: Sans-Serif fonts have clean lines (no small strokes attached).They create a modern and minimalistic look.
                     Examples: Arial,Verdana,Helvetica.

        3.Monospace: Monospace fonts- here all the letters have the same fixed width.They create a mechanical look.
                    Examples: Courier New,Lucida Console,Monaco.
                    
        4.Cursive: Cursive fonts imitate human handwriting.
                  Examples: Brush Script MT,Lucida Handwriting.
        
        5.Fantasy: Fantasy fonts are decorative/playful fonts.
                  Examples: Copperplate,Papyrus.
     
     =Specific font families:- Specific font families are specific fonts with different styles within the one font family
                               name,such as Arial,Times New Roman,and Tahoma.
                               

    *line-height-
       line-height:2px;
       line-height:normal;
    
    *text-transform-
       text-transform:uppercase/lowercase/capitalize/none

    
  #Units in CSS- CSS has several different units for expressing a length.
   
    There are two types of length unites: Absolute and Relative.

     *Absolute Lengths- The Absolute Length Units are fixed and a length expressed in any of these will appear as exactly that size.
       
       Units          Description
        cm               centimeters
        mm               millimeters
        in               inches(1 in =96px =2.54cm)
        px               pixels(1px =1/96th of 1 in)  (Pixels are relative to the viewing device)
        pt               points(1pt =1/72 of 1 in)
        pc               picas (1pc =12 pt)
      
     *Relative Lengths- Relative length units specify a length relative to another length property.Relative length unites scale
                        better between different rendering medium.

       Units         Description
        em               Relative to the font-size of the element (2em means 2 times the size of the current font)
        ex               Relative to the x-height of the current font (rarely used)
        ch               Relative to the width of the "0"(zero)
        rem              Relative to font-size of the root element
        vw               Relative to 1% of the width of the viewport
        vh               Relative to 1% of the hight of the viewport
        vmin             Relative to 1% of viewport's smaller dimension
        vmax             Relative to 1% of viewport's larger dimension
        %                Relative to the parent element
  

  #Practice set-2
    Q1:Create a heading centerd on the page with all of its text capitalized by default.

    Q2:Set the font family of all the content in the document to "Times New Roman".

    Q3:Create one div inside another div.
       Set id & text "outer" for the first one & "inner" for the second one.
       Set the outer div text size to 25px & inner div text size to 10px.


 
       
Level-2
 #Box Model in CSS -Hight,Width,Border,Padding,Margin.
  
 *Height-By default,it sets the content area height of the element
   div{
    height:50px;
   }
  
  *Width-By default,it sets the content area width of the element
    div{
      width:50px;
    }
  
  *Border-Used to set an element's border
     border-width:2px;
     border-style:solid/dotted/dashed
     border-color:black;

    Border Shorthand-
      border:2px solid black;
             |     |     |
          width  style  color
    
    Border Radius-Used to round the corners of an element's outer border edge
      border-radious:10px;
      border-radious:50%;
    
    Create circle-
       hight:100px;
       width:100px;
       border-radius:50%;

  *Padding-
    padding-left:25px;
    padding-right:25px;
    padding-top:25px;
    padding-bottom:25px;
   
   Padding Shorthand-
    padding:50px; (TRBL-Top,Right,Bottom,Left)
    padding:1px 2px 3px 4px;
           |    |   |   |
         top right bottom left ->clockwise

  *Margin-
     margin-right:20px;
     margin-left:20px;
     margin-top:20px;
     margin-bottom:20px;

   Margin Shorthand-
     margin:50px; (TRBL-Top,Right,Bottom,Left)
     margin:1px 2px 3px 4px;
            |    |   |   |
          top right bottom left ->clockwise
 

 #Practice Set-3
   Q1:Create a div with hight & width of 100px;
      Set its background color to green & the border radius to 50%.

   Q2:Create the following navbar.
      amazon.in    Account       My Cart           Contact Us     |Search Amazon.in |search|



 #Display Property-
   display:inline/block/inline-block/none
     
      >inline -Takes only the space requirserveded by the element.(no margin/padding)
      >block -Takes full space available in width.
      >inline-block -Similir to inline but we can set margin & padding.
      >none -To remove element from document flow.

  >Visibility-
     visibility:hidden;

     Note:When visibility is set to none,space for the element is reserved
          But for display set to none,no space is reserved or blocked for 
          the element.
  
 #Alpha Channel-
    opacity(0 to 1)

    >RGBA
      color:rgba(255,0,0,0.5)
      color:rgba(255,0,0,1)

 #Practice Set-4
   Q1:Create a webpage layout with a header,a footer & a content area containing 3 divs.
      Set the height & width of divs to 100px.
      (add the previous navbar in the header)
    
   Q2:Add borders to all the divs.

   Q3:Add a different background color to each div with an opacity of 0.5

   Q4:Give the content area appropriate height.


Level-3
 #Units in CSS-
   Relative-(%,em,rem)
    
    >Percentage(%)-It is often used to define a size as relative to an element's parent object.
       width:33%;
       margin-left:50%;

    >Em-
      Unit           Relative to
       em               Font size of the parent,in the case of typeographical like font-size,and
                        font size of the element itself,in the case of other properties like width.

    >Rem(Root Em)-
      Unit           Relative to
       rem               Font size of the root element.
      
    >Others-
      vh:relative to 1% viewport height
      vw:relative to 1% viewport width

 #Position Property -The position CSS property sets how an element is positioned in a document.
      position:static/relative/absolute/fixed

    >Static -default position (The top,right,bottom,left,and z-index properties have no effect)

    >Relative -element is relative to itself.(The top,right,bottom,left,and z-index will work)

    >Absolute -positioned relative to its closest positioned ancestor.(removed from the flow)

    >fixed -positioned relative to browser.(removed from flow)

    >sticky -positioned based on user's scroll position
 
 #Z-index -It decides the stack level of elements.
           Overlapping elements with a larger z-index cover those with a smaller one.
            
      z-index:auto(0)
      z-index:1/2/....
      z-index:-1/-2/....

 #Background Image -Used to set an image as background
     background-image:url("image.jpeg")
    
   >Background Size-
      background-size:cover/contain/auto


 #Practice Set-5
   Q1:Create the following layout using the given html.
      Give the div a hight,width & some background image.
      Use the appropriate position property for the div element to place it at the
      right end of the page.(The div should not move even on scroll)
      
      <p>lorem*5</p>
      <div>Love Nature</div>
      <p>lorem*5</p>

Level-4
  ##Flexbox (Flexible Box Layout) -It is a one-dimensional layout method for arranging items in rows or columns.
    
    #Flexbox Direction -It sets how flex items are placed in the flex container,along which axis and direction.
     >flex-direction:row; (default)
     >flex-direction:row-reverse;
     >flex-direction:column;
     >flex-direction:column-reverse;

    #Flex Properties- for Flex Container
      >justify-content:alignment along the main axis.
                       flex-start/flex-end/center/space-evenly/

      >flex-wrap:nowrap/wrap/wrap-reverse

      >align-items:alignment along the cross axis.

      >align-content:alignment of space between & around the content along cross-axis.
    
    #Flex Properties- for flex item
      >align-self:alignment of individual along the cross axis.
      >flex-grow:how much a flex item will grow relative to the rest of the flex items if space is available.
      >flex-shrink:how much a flex item will shrink reletive to the rest of the flex items if space is available.

  #Practice Set-6
    Q1:Create a navbar with 4 options in the from of anchor tags inside list items.
       Now,use flexbox to place them all spaced equally in a single line.

    Q2:Use flexbox to center one div inside another div.

    Q3:Which has higher priority-align-items or align-self ?

  #Media Queries -Help create a responsive website
    @media(width:600px){
      div{
        background-color:red;
      }
    }

    @media(min width:600px){
      div{
        background-color:red;
      }
    }

    @media(min-width:200px)and(max-width:300px){
      div{
        background-color:red;
      }
    }

    @media screen and (width:600px){
      div{
        background-color:red;
      }
    }

    @media screen and (min-width:200px)and(max-width:300px){
      div{
        background-color:red;
      }
    }
    
     @media only screen and (width:600px){
      div{
        background-color:red;
      }
    }

    @media only screen and(min-width:200px)and(max-width:300px){
      div{
        background-color:red;
      }
    }
    
  #Practice Set-7
    Q:Add a media query to implement the following:
      >the color of a div changes to green for viewport width less then 300px.
      >the color of a div changes to pink for width between 300px & 400px
      >the color of a div changes to red for width between 400px & 600px
      >the color of a div changes to blue for width above 600px
  
    
Level-5
  #Transitions -Transitions enable you to define the transition between two states of an element.
    >transition-property:property  you want to transition(font-size,width etc.)
    >transition-duration:2s/4ms..
    >transition-timing-function:ease-in/ease-out/linear/steps..
    >transition-delay:2s/4ms..

   *Transition Shorthand-
      property name|duration|timing-function|delay
        
        transition:font-size 2s ease-in-out 0.2s;
    

  #CSS Transfrom - Used apply 2D & 3D transformations to an element
    >rotate-
      transform:rotate(45deg);

      rotate:45deg;
      rotateX:45deg;
      rotateY:45deg;
      rotateZ:45deg;

    >scale-
      transform:scale(2);
      transform:scale(0.5);
      transform:scale(1,2);
      transform:scaleX(0.5);
      transform:scaleY(0.5);

    >translate-
      transform:translate(20px);
      transform:translate(20px,50px);
      transform:translateX(20px);
      transform:translateY(20px);

    >skew-
      transform: skew(30deg);

  
  #Animation- To animate CSS elements
    @keyframe myName{
      from{font-size:20px;}
      to{font-size:40px;}
    }
    
    >Animation Properties-
      animation-name
      animation-duration
      animation-timing-function
      animation-delay
      animation-iteration-count
      animation-direction
    
    >Animation Shorthand-
      animatio:myname 2s linear 3s infinite normal;

    > % in Animation-
      @keyframe myName{
        0% {font-size:20px;}
        50% {font-size:30px;}
        100% {font-size:40px;}
      }

  #Practice Set-8
    Qs: Create a simple loader using CSS
      Step1 : create a div with circular shape & a thick border from one end
      (top/bottom/left/right)
      Step2 : To make it spin create an animation which transforms it from 0deg to 360deg
      Step3 : Add the animation property to the loader with infinite duration